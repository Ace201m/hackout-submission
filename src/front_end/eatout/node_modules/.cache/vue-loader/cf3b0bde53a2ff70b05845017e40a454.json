{"remainingRequest":"/home/khush/Desktop/hackout-submission/src/front_end/eatout/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/khush/Desktop/hackout-submission/src/front_end/eatout/src/components/body.vue?vue&type=style&index=0&id=37b8e0b2&scoped=true&lang=css&","dependencies":[{"path":"/home/khush/Desktop/hackout-submission/src/front_end/eatout/src/components/body.vue","mtime":1581730451219},{"path":"/home/khush/Desktop/hackout-submission/src/front_end/eatout/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/khush/Desktop/hackout-submission/src/front_end/eatout/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/khush/Desktop/hackout-submission/src/front_end/eatout/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/khush/Desktop/hackout-submission/src/front_end/eatout/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/khush/Desktop/hackout-submission/src/front_end/eatout/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5hcHBfYm9keSB7CiAgICBtYXJnaW4tdG9wOjEwcHg7CiAgICBtaW4taGVpZ2h0OiA0MDBweDsKICAgIG1hcmdpbi1ib3R0b206NzBweDsKfQpkaXYuYXBwX2JvZHkgewogIGJvcmRlcjogMjBweCAjZjQzNDYxIHNvbGlkOwp9Ci5idG4gewogIGJhY2tncm91bmQtY29sb3I6ICNmNDM0NjE7CiAgY29sb3I6IHdoaXRlOwogIHBhZGRpbmc6IDdweDsKICBib3JkZXItcmFkaXVzOiAxMHB4OwogIG1hcmdpbjogMTVweDsKICBtYXJnaW4tdG9wOjdweDsKfQouYnRuOmZvY3VzLCAuYnRuOmFjdGl2ZTpmb2N1cywgLmJ0bi5hY3RpdmU6Zm9jdXN7CiAgICBvdXRsaW5lOm5vbmU7CiAgICBib3gtc2hhZG93Om5vbmU7Cn0KaDN7CiAgbWFyZ2luLWJvdHRvbTogMHB4OwogIHBhZGRpbmctYm90dG9tOiAwOwp9Cgo="},{"version":3,"sources":["body.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"body.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"app_body container\">\n    <template v-for='(message, index) in getMessages'>\n      <messageDisplay v-bind:message='message' :fromBot='message.fromBot' :key=\"index\"></messageDisplay>\n    </template>\n    \n    <br>\n    <hr v-if=\"!initial && isVeg!=''\">\n    <h3>{{ question }}</h3>\n    <br>\n    \n    \n    <button class=\"btn\" v-if='initial' @click=\"initialize()\" >Start!</button>\n    \n    <template v-if=\"!initial && isVeg==''\" >\n      <template v-for='category in categories'>\n    <button class=\"btn\"   :key='category' @click=\"setIsVeg(category)\" >{{ category }}</button>\n    </template>\n    </template>\n\n    <template v-if=\"!initial && isVeg!=''\">\n      <template v-for='category in categories'>\n    <button class=\"btn\" :key='category' @click=\"getSomething(category)\" >{{ category }}</button>\n    </template>\n    </template>\n\n  </div>\n</template>\n\n<script>\nimport messageDisplay from './messageDisplay.vue';\n\nexport default {\n  name: 'Body',\n  components: {\n    'messageDisplay': messageDisplay\n  },\n  data: ()=>{\n    return {\n      messages: [],\n      baseURL: 'http://localhost:5000/recommender?isveg=',\n      q: [],\n      isVeg: '',\n      categories: ['Start!'],\n      initial: true,\n      question: \"Can't think what to eat, I can help?\",\n    }\n  },\n  methods: {\n    initialize () {\n      this.question = \"What would you prefer?\";\n      this.categories = ['Veg', 'Both', 'Non veg'];\n      this.initial = false;\n    },\n    setIsVeg (inp) {\n      this.isVeg = inp;\n      this.isVeg = this.isVeg.replace(/\\s/g,'').toLowerCase();\n      var newMessage = {\n        fromBot: false,\n        messageText: \"You selected \"+inp+'.'\n      }\n      this.messages.push(newMessage);\n\n      // send request\n\n      this.$http.get(this.baseURL+this.isVeg+'&query=').then(\n        (response) => {\n          var nnewMessage = {\n            messageText: \"What would you like to have?\",\n            fromBot: true,\n          }\n\n          this.question = \"Select from given options -\";          \n          var temp = [];\n          for(var i in response.body.options){\n            temp.push(response.body.options[i]);\n          }\n          this.categories = temp;\n          this.messages.push(nnewMessage);\n\n\n        }\n      ).catch( response => {\n        console.log(response);\n      });\n    },\n\n    getSomething (category) {\n      this.q.push(category);\n      \n      this.messages.push({\n        fromBot: false,\n        messageText: \"You selected \"+category+'.'\n      });\n\n      var queryAddOn = '';\n\n      for(var a in this.q){\n        queryAddOn += this.q[a].replace(' ','_');\n        if(a!=this.q.length-1){\n          queryAddOn += '*';\n        }\n          \n      }\n      this.$http.get(this.baseURL+this.isVeg+'&query='+queryAddOn).then(\n        (response) => {\n          \n          if('result' in response.body){\n\n            this.question = \"complete\";\n            console.log(response);\n            console.log(response.body.result);\n            var nnnewMessage = {\n              messageText: response.body.result,\n              fromBot: true,\n            };\n            this.messages.push(nnnewMessage);\n            this.categories = [];\n          }\n          else{\n            var nnewMessage = {\n            messageText: \"What would you like to have?\",\n            fromBot: true,\n          }\n\n          this.question = \"Select from given options -\";          \n          var temp = [];\n          for(var i in response.body.options){\n            temp.push(response.body.options[i]);\n          }\n          this.categories = temp;\n          this.messages.push(nnewMessage);\n          }\n          \n\n\n        }\n      ).catch( response => {\n        console.log(response);\n      });\n    }\n  },\n  computed: {\n    getMessages () {\n      return this.messages;\n    }\n  },\n  \n}\n</script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.app_body {\n    margin-top:10px;\n    min-height: 400px;\n    margin-bottom:70px;\n}\ndiv.app_body {\n  border: 20px #f43461 solid;\n}\n.btn {\n  background-color: #f43461;\n  color: white;\n  padding: 7px;\n  border-radius: 10px;\n  margin: 15px;\n  margin-top:7px;\n}\n.btn:focus, .btn:active:focus, .btn.active:focus{\n    outline:none;\n    box-shadow:none;\n}\nh3{\n  margin-bottom: 0px;\n  padding-bottom: 0;\n}\n\n</style>\n"]}]}